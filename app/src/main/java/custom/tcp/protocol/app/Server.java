/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package custom.tcp.protocol.app;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

public class Server {
    private static final String DEFAULT = "DEFAULT";
    private static final String ERROR_MESSAGE = "We only accept DELETE <key>, GET <key> and PUT <key>_<value> format.";
    private static final Map<String, Function<String, String>> mapFunction = new HashMap<>();
    private final Map<String, String> cache = new HashMap<>();
    private final ServerSocket serverSocket;
    private Thread serverThread;

    private boolean isServerRunning;

    public Server(int port) throws IOException {
        mapFunction.put("DELETE", this::delete);
        mapFunction.put("PUT", this::put);
        mapFunction.put("GET", this::get);
        mapFunction.put(DEFAULT, this::gibberish);
        serverSocket = new ServerSocket(port);
        isServerRunning = true;
    }

    private String gibberish(String key) {
        return ERROR_MESSAGE;
    }

    private String put(String key_value) {
        String[] key_value_arr = key_value.split("_");
        String key = key_value_arr[0];
        String value = key_value_arr[1];
        System.out.println("Inside put key = <" + key + "> value - <" + value + ">");

        cache.put(key, value);
        return "SUCCESS";
    }

    private String delete(String key) {
        System.out.println("Inside del. key - <" + key + ">");
        return cache.remove(key);
    }

    private String get(String key) {
        System.out.println("Inside get key - <" + key + ">");
        return cache.get(key);
    }

    public void start() throws IOException {
        serverThread = new Thread( () -> {
            try {
                runServer();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
        serverThread.start();
    }

    public void shutdown() throws IOException, InterruptedException {
        isServerRunning = false;
        Thread.sleep(100L);
        serverSocket.close();
        serverThread.interrupt();
    }

    private void runServer() throws IOException {
        System.out.println("Server is listening on port " + 1234);
        while (isServerRunning) {
            Socket socket = serverSocket.accept();
            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            String command = reader.readLine();
            String[] commandArray = command.split(" ");
            if("CLOSE".equals(commandArray[0])) {
                PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
                writer.println("SERVER CLOSED");
                socket.close();
                break;
            }
            String output =
                mapFunction.getOrDefault(commandArray[0], mapFunction.get(DEFAULT)).apply(commandArray[1]);
            System.out.println("Response - <" + output + ">");
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
            writer.println(output);
            socket.close();
        }
    }
}
